[{"content":"概要 googleで使える検索演算子をまとめる。\n🔍 基本的な検索演算子 演算子 内容 例 \u0026quot;\u0026quot; 完全一致検索 \u0026quot;検索演算子 一覧\u0026quot; → その語順通りの結果だけ - 除外検索 猫 -犬 → 犬を含まない猫の情報 site: 特定サイト内検索 site:nhk.or.jp 地震 intitle: タイトルに含む intitle:Python inurl: URLに含む inurl:login filetype: ファイル形式指定 filetype:pdf 就職活動 OR（大文字） いずれかを含む Python OR JavaScript * ワイルドカード \u0026quot;AI * 影響\u0026quot; → 間に何か入るパターンを検索 .. 数値範囲 iPhone 10..14 → iPhone10〜14の範囲検索 💡 応用・裏技っぽい使い方 技 内容 例 related: 関連サイト表示 related:youtube.com cache: キャッシュページ表示 cache:example.com \u0026quot;検索語1\u0026quot; AROUND(N) \u0026quot;検索語2\u0026quot; 近接検索（N語以内） \u0026quot;AI\u0026quot; AROUND(3) \u0026quot;倫理\u0026quot; define: 単語の定義を検索 define:machine learning before: / after: 日付で絞る（Google News等） ウクライナ after:2023-01-01 ","date":"2025-07-09T17:46:00+09:00","permalink":"https://kokilabo.github.io/koucha/p/%E4%BE%BF%E5%88%A9%E3%81%AA%E6%A4%9C%E7%B4%A2%E6%BC%94%E7%AE%97%E5%AD%90/","title":"便利な検索演算子"},{"content":"※これは個人的なメモです\n📚 tmux メモ tmuxはターミナル上で複数の作業空間（セッション・ウィンドウ・ペイン）を効率的に扱うためのツールです。\n🧠 概要構造（セッション・ウィンドウ・ペイン） 1 2 3 4 5 6 7 8 9 10 セッション1（作業A） ├─ ウィンドウ0（エディタ） │ └─ ペイン1 ├─ ウィンドウ1（サーバー） │ ├─ ペイン1 │ └─ ペイン2 セッション2（作業B） ├─ ウィンドウ0（デバッグ） │ └─ ペイン1 📌 セッション操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # セッション一覧を表示 tmux ls # セッションの新規作成（無名） tmux # セッションの新規作成（名前つき） tmux new -s session-name # セッションに接続（アタッチ） tmux attach -t session-name tmux a -t session-name # 省略形 # セッションの終了（中で exit または Ctrl-D） # または、別セッションから強制終了 tmux kill-session -t session-name 🪟 ウィンドウ操作（prefix = Ctrl-b） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 新しいウィンドウを作成 \u0026lt;prefix\u0026gt; c # 次のウィンドウへ移動 \u0026lt;prefix\u0026gt; n # 前のウィンドウへ移動 \u0026lt;prefix\u0026gt; p # ウィンドウ番号で直接移動（例：ウィンドウ0） \u0026lt;prefix\u0026gt; 0 # ウィンドウの名前を変更 \u0026lt;prefix\u0026gt; , 📐 画面分割（ペイン操作） 1 2 3 4 5 6 7 8 # 横に分割（上下に並べる） \u0026lt;prefix\u0026gt; \u0026#34; # 縦に分割（左右に並べる） \u0026lt;prefix\u0026gt; % # ペイン間を移動（方向キー） \u0026lt;prefix\u0026gt; ↑ ↓ ← → 🔁 設定ファイルの再読み込み 1 2 # .tmux.conf を編集した後に反映 tmux source-file ~/.tmux.conf 🧩 プラグイン Extrakto Extraktoは、画面出力からパス・URLなどを抽出し、fzf で操作できるプラグイン。\n1 2 # Extrakto を起動（デフォルト） \u0026lt;prefix\u0026gt; Tab 💡 小技（Tips） 🔍 出力内容のコピー 1 2 3 4 5 6 7 8 9 10 11 # コピー（スクロール）モードに入る \u0026lt;prefix\u0026gt; [ # カーソルで選択範囲を移動 ↑ ↓ ← → または Vimモードで h j k l # 選択開始 スペースキー # 選択終了してコピー Enter 🔎 パス検索の一例 1 fd . | grep \u0026#39;some/path/pattern\u0026#39; ","date":"2025-06-26T01:22:47+09:00","permalink":"https://kokilabo.github.io/koucha/p/tmux%E3%81%AE%E3%83%A1%E3%83%A2/","title":"Tmuxのメモ"},{"content":"※これは個人的なメモです。\n概要 CLIツールのドキュメント（随時追加予定）\n🚀 fd — Simple · Fast · User-friendly find 代替 基本構文 fd [PATTERN] [PATH] [OPTIONS] デフォルト PATTERN は 正規表現 / PATH 省略で カレント dir 特徴 隠しファイル除外・シンタックスカラー・マルチスレッド検索 🔑 代表例 目的 コマンド hello を含むファイル fd hello ホーム直下から config 検索 fd config ~ 拡張子 .txt を検索 fd '.txt$' 📜 主なオプション オプション 意味 -H / --hidden 隠しファイルも対象 -I .gitignore 無視 -t f / -t d ファイル / ディレクトリのみ -e \u0026lt;ext\u0026gt; 拡張子検索（例 -e rs） -x \u0026lt;cmd\u0026gt; {} 結果にコマンド適用 順序は自由 — fd -H config ~ のように OPTION を前にしても OK。\n⚡ fzf — Anything-to-Anything Fuzzy Finder 1️⃣ 基礎コマンド 目的 コマンド例 テキストリストから選択 cat list.txt | fzf 履歴検索 history | fzf Git 管理下ファイルを検索 git ls-files | fzf プロセス選択 ps aux | fzf クリップボードへ送る some_command | fzf | pbcopy 2️⃣ キーバインド（シェル統合） キー デフォルト動作 Ctrl T ファイル選択 → パスを挿入 Ctrl R 履歴検索 → コマンド貼り付け Alt C ディレクトリ選択 → cd 3️⃣ カスタム：fd を使う Ctrl T ~/.zshrc export FZF_CTRL_T_COMMAND=\u0026lsquo;fd \u0026ndash;type f \u0026ndash;hidden \u0026ndash;follow \u0026ndash;exclude .git\u0026rsquo;\n🚀 Neovim Leader = Space（半角スペース） — 主要キーバインド一覧\n⚙️ lazy.nvim — プラグイン管理 キー / コマンド アクション :Lazy プラグインの状態を UI で確認・操作 :Lazy sync 設定と同期（install / update / clean 全部） :Lazy update プラグインのアップデートのみ実行 :Lazy install 未インストールのプラグインを導入 :Lazy clean 不要なプラグインを削除 :Lazy check アップデートがあるか確認（更新はしない） :Lazy restore lockfile に記録された状態に復元 🔍 Telescope — 検索 キー アクション Leader f f ファイル検索 Leader f g 全文 Grep Leader f b バッファ一覧 Leader f h ヘルプ検索 📜 Telescope 中の操作 キー 動作 Esc 終了 Ctrl u / Ctrl d プレビュー上下スクロール 🧠 LSP — コードナビ \u0026amp; 診断 キー アクション g d 定義へジャンプ K ホバー情報 Leader r n リネーム Leader c a コードアクション ] d / [ d 次 / 前の Diagnostic Leader e Diagnostic ポップアップ Leader q Diagnostic → loclist 🌳 Treesitter キー アクション g n n 増分選択開始 g r n / g r m 選択拡張 / 縮小 g r c スコープ単位拡張 🔤 nvim-cmp / LuaSnip キー アクション Ctrl Space 補完ポップアップ Ctrl n / Ctrl p 次 / 前候補 Enter 候補確定 Tab / Shift Tab 候補ナビ or スニペットジャンプ ","date":"2025-06-25T01:22:01+09:00","permalink":"https://kokilabo.github.io/koucha/p/cli%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/","title":"CLIドキュメント"},{"content":"※これは個人メモです\n概要 ここではhugoで使うコマンドをまとめる\nコマンド 1 2 3 4 5 6 7 8 # ローカルでサーバーを起動 hugo server -D # 新しいポストを作成 hugo new post/hello/index.md # ビルド hugo ","date":"2025-06-03T18:15:46+09:00","permalink":"https://kokilabo.github.io/koucha/p/hugo%E3%81%A7%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/","title":"Hugoで使うコマンド"},{"content":"※これは個人的なメモです\n概要 この記事ではEthereumについて学んだことをまとめる\nethereumとは イーサリアムのプロトコルが支える何千ものアプリやブロックチェーンのための主要プラットフォーム\nコンセンサスアルゴリズムの変更：PoWとPoS PoW(Proof of Work)→PoS(Proof of Stake)に移行（2022年9月15日）→エネルギー消費量を99.95%削減\nPoW 代表例：ビットコイン、イーサリアム（Merge以前）\n攻撃者は計算能力を多く持っていた場合、Ethereumのネットワークを支配することができる→51%攻撃\nPoS 代表例：イーサリアム（Merge以降）\n攻撃者が資産を多く持っていた場合スラッシングの仕組みにより経済合理性崩壊\nスラッシング→不正行為をするとステークしたコインが没収される\nReFi ReFi（リファイ）」= Regenerative Finance（再生型金融）\n2015年に経済学者のジョン・フラートン氏（John Fullerton）が提唱した「Regenerative Capitalism（再生資本主義）」を基にしている。\nざっくりいうとお金を増やすだけじゃなく、環境や社会にプラスの影響を与える金融の形\n環境プロジェクトの進捗管理（植林の本数、CO2排出量の削減量など）の透明化 環境問題→外の世界の情報をとってくる必要ある→オラクル問題と関係あり\nオラクル問題どうする？ IoTとか衛生データ 第三者機関による監査 分散型オラクル（Chainlinkなど） 参考資料 Ethereum.org\n","date":"2025-06-03T00:46:19+09:00","permalink":"https://kokilabo.github.io/koucha/p/ethereum%E3%81%A8%E3%81%9D%E3%81%AE%E4%BB%96%E5%91%A8%E8%BE%BA%E6%8A%80%E8%A1%93%E6%A6%82%E5%BF%B5%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%83%A1%E3%83%A2/","title":"Ethereumとその他周辺技術・概念についてのメモ"},{"content":"はじめまして hugoを使ってブログを作ってみた\n","date":"2025-05-27T01:03:53+09:00","permalink":"https://kokilabo.github.io/koucha/p/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E6%8A%95%E7%A8%BF/","title":"初めての投稿"}]